---
# tasks file for roles/jenkins
- name: install Java runtime environment
  become: true
  package:
    name: default-jre
    state: present

- name: Adding the ansible repository
  apt_repository:
    repo: ppa:ansible/ansible

- name: Install Ansible
  become: true
  package: 
    name: ansible
    state: present

- name: Install prerequisites for Docker
  apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2' ,'software-properties-common']
    update_cache: yes
- name: Add Docker GPG key
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg
- name: Add Docker APT repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/{{ansible_distribution|lower}} {{ansible_distribution_release}} stable
- name: Install Docker
  apt:
    name: docker-ce
    update_cache: yes

- name: Install make
  apt:
    name: make
    update_cache: yes

- name: Add apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository: 
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl

- name: Install wget
  apt:
    name: wget
    update_cache: yes

    #- name: Download Terraform
    #  get_url:
    #    url: https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_linux_amd64.zip
    #    dest: /tmp
    #  when: "'64' in ansible_architecture and 'Linux' == ansible_system"

    #- name: Unarchive Terraform
    #  unarchive:
    #    src: https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_linux_amd64.zip
    #    src: /tmp/terraform_0.12.16_linux_amd64.zip
    #    dest: /usr/local/bin


- name: Determine Terraform checksums
  uri: url="https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_SHA256SUMS"
       method="GET"
       return_content=True
  register: terraform_checksums


- name: Download Terraform
  get_url: url="https://releases.hashicorp.com/terraform/0.12.16/terraform_0.12.16_linux_amd64.zip"
           dest="/usr/local/src/terraform_0.12.16_linux_amd64.zip"
           checksum="sha256:{{ item.split(' ') | first }}"
  with_items: "{{ terraform_checksums.content.split('\n') | select('search', 'linux_amd64') | list | first }}"
  register: terraform_downloaded


- name: Extract and install Terraform
  unarchive: src="/usr/local/src/terraform_0.12.16_linux_amd64.zip"
             dest=/usr/local/bin
             copy=no
             #  when: current_terraform_version.rc != 0 or terraform_downloaded | changed
#- name: install Python3 package
#  become: true
#  package:
#    name: python3
#    state: present
#- name: install pip packages
#  pip:
#    name: virtualenv
#    state: present
#    executable: pip3
- name: Download jenkins WAR file into /usr/local/etc
  get_url:
    url: 'http://mirrors.jenkins.io/war-stable/latest/jenkins.war'
    dest: /usr/local/etc

- name: Setup Jenkins service - NB - service started in handlers/main.yml so doesnt need path
  template:
    dest: /etc/systemd/system/jenkins.service
    src: jenkins.service
#    src: roles/jenkins/templates/jenkins.service
  notify:
    - restart jenkins service

# Use the flush_handlers 
- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: Wait until the /root/.jenkins/secrets/initialAdminPassword is populated
  wait_for:
    path: /root/.jenkins/secrets/initialAdminPassword

- name:  Display jenkins password
  shell: cat /root/.jenkins/secrets/initialAdminPassword
  register: initialAdminPassword

- debug:
    var: initialAdminPassword.stdout
#   msg: InitialAdminPaaword {{ initialAdminPassword.stdout }}
#    verbosity: 2

- name: Start jenkins at boot
  systemd: 
    enabled: true
    name: jenkins
  
##- name: After 5s, Wait for Jenkins port 8080 to become open on the host
##  wait_for:
##    host: "{{ inventory_hostname }}"
##    port: 8080
##    delay: 5
#  delegate_to: localhost

#- name: Check that jenkins page returns a 200 status
#  uri: "{{ inventory_hostname }}:8080"
#    return_content: yes
#  register: return_data
#  failed_when: "'200' not in return_data.status"

#- name: Wait for jenkins to boot
#  wait_for:
#    path: /var/log/jenkins.log
#    search_regex: "INFO: Jenkins is fully up and running"

